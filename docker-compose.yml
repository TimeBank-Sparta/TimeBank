services:
  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    env_file:
      - .env
    depends_on:
      - eureka-server
    networks:
      - msanet

  eureka-server:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8761
    networks:
      - msanet

  gateway-service:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - config-server
    networks:
      - msanet
    command: sh -c "./wait-for-it.sh config-server:8888 --timeout=15 -- ./wait-for-it.sh eureka:8761 --timeout=15 -- java -jar gateway.jar"

  help-service:
    build:
      context: .
      dockerfile: help-service/Dockerfile
    container_name: help-service
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # help-service에서 사용될 MySQL 호스트는 "help-mysql"입니다.
    depends_on:
      - eureka-server
      - config-server
      - help-mysql
      - gateway-service
    networks:
      - msanet

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # notification-service에서 사용될 MySQL 호스트는 "notification-mysql"입니다.
    depends_on:
      - eureka-server
      - config-server
      - notification-mysql
      - gateway-service
    networks:
      - msanet

  review-service:
    build:
      context: .
      dockerfile: review-service/Dockerfile
    container_name: review-service
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # review-service에서 사용될 MySQL 호스트는 "review-mysql"입니다.
    depends_on:
      - eureka-server
      - config-server
      - review-mysql
      - gateway-service
    networks:
      - msanet

  point-service:
    build:
      context: .
      dockerfile: point-service/Dockerfile
    container_name: point-service
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # point-service에서 사용될 MySQL 호스트는 "point-mysql"입니다.
    depends_on:
      - eureka-server
      - config-server
      - point-mysql
      - gateway-service
      - zookeeper
      - kafka
    networks:
      - msanet

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    ports:
      - "8085:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
      # user-service에서 사용될 MySQL 호스트는 "user-mysql"입니다.
    depends_on:
      - eureka-server
      - config-server
      - user-mysql
      - gateway-service

    networks:
      - msanet

  # Kafka 및 Zookeeper 추가
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - msanet

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

    networks:
      - msanet

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - msanet

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - msanet

  # MySQL 데이터베이스를 각 서비스별로 생성 (외부 접근을 위해 서로 다른 호스트 포트 사용)
  help-mysql:
    image: mysql:8
    container_name: help-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: help_db
    ports:
      - "3307:3306"
    volumes:
      - help_mysql_data:/var/lib/mysql
    networks:
      - msanet

  notification-mysql:
    image: mysql:8
    container_name: notification-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: notification_db
    ports:
      - "3308:3306"
    volumes:
      - notification_mysql_data:/var/lib/mysql
    networks:
      - msanet

  review-mysql:
    image: mysql:8
    container_name: review-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: review_db
    ports:
      - "3309:3306"
    volumes:
      - review_mysql_data:/var/lib/mysql
    networks:
      - msanet

  point-mysql:
    image: mysql:8
    container_name: point-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: point_db
    ports:
      - "3310:3306"
    volumes:
      - point_mysql_data:/var/lib/mysql
    networks:
      - msanet

  user-mysql:
    image: mysql:8
    container_name: user-mysql
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: user_db
    ports:
      - "3311:3306"
    volumes:
      - user_mysql_data:/var/lib/mysql
    networks:
      - msanet

networks:
  msanet:
    driver: bridge

volumes:
  help_mysql_data:
  notification_mysql_data:
  review_mysql_data:
  point_mysql_data:
  user_mysql_data:
