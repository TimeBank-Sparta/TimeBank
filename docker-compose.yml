services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx-conf:/etc/nginx/conf.d
    depends_on:
      - gateway-blue
      - gateway-green
    networks:
      msanet:
        aliases:
          - gateway-service

  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    image: namgyu967/config-server:latest
    container_name: config-server
    restart: always
    ports:
      - "8888:8888"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
    networks:
      - msanet

  eureka-server:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    image: namgyu967/eureka-server:latest
    container_name: eureka-server
    restart: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8761
    networks:
      - msanet

  gateway-blue:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    image: namgyu967/gateway-service:latest
    container_name: gateway-blue
    restart: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - msanet

  gateway-green:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    image: namgyu967/gateway-service:latest
    container_name: gateway-green
    restart: always
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    networks:
      - msanet

  help-service:
    build:
      context: .
      dockerfile: help-service/Dockerfile
    image: namgyu967/help-service:latest
    container_name: help-service
    restart: always
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - config-server
      - nginx
      - help-mysql
      - zookeeper
      - kafka
      - redis
    entrypoint: sh -c "./wait-for-it.sh gateway-service:8080 --timeout=60 --strict -- java -jar help-service.jar"
    networks:
      - msanet

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    image: namgyu967/notification-service:latest
    container_name: notification-service
    restart: always
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - config-server
      - nginx
      - notification-mysql
    entrypoint: sh -c "./wait-for-it.sh gateway-service:8080 --timeout=60 --strict -- java -jar notification-service.jar"
    networks:
      - msanet

  review-service:
    build:
      context: .
      dockerfile: review-service/Dockerfile
    image: namgyu967/review-service:latest
    container_name: review-service
    restart: always
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - config-server
      - nginx
      - review-mysql
    entrypoint: sh -c "./wait-for-it.sh gateway-service:8080 --timeout=60 --strict -- java -jar review-service.jar"
    networks:
      - msanet

  point-service:
    build:
      context: .
      dockerfile: point-service/Dockerfile
    image: namgyu967/point-service:latest
    container_name: point-service
    restart: always
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - config-server
      - point-mysql
      - nginx
      - zookeeper
      - kafka
    entrypoint: sh -c "./wait-for-it.sh gateway-service:8080 --timeout=60 --strict -- java -jar point-service.jar"
    networks:
      - msanet

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    image: namgyu967/user-service:latest
    container_name: user-service
    restart: always
    ports:
      - "8085:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - SERVER_PORT=8080
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - config-server
      - nginx
      - user-mysql
    entrypoint: sh -c "./wait-for-it.sh gateway-service:8080 --timeout=60 --strict -- java -jar user-service.jar"
    networks:
      - msanet

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - msanet

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
      - config-server
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - msanet

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    restart: always
    ports:
      - "9093:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - msanet

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - msanet

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - "9411:9411"
    networks:
      - msanet

  help-mysql:
    image: mysql:8
    container_name: help-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: help_db
    ports:
      - "3307:3306"
    volumes:
      - help_mysql_data:/var/lib/mysql
    networks:
      - msanet

  notification-mysql:
    image: mysql:8
    container_name: notification-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: notification_db
    ports:
      - "3308:3306"
    volumes:
      - notification_mysql_data:/var/lib/mysql
    networks:
      - msanet

  review-mysql:
    image: mysql:8
    container_name: review-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: review_db
    ports:
      - "3309:3306"
    volumes:
      - review_mysql_data:/var/lib/mysql
    networks:
      - msanet

  point-mysql:
    image: mysql:8
    container_name: point-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: point_db
    ports:
      - "3310:3306"
    volumes:
      - point_mysql_data:/var/lib/mysql
    networks:
      - msanet

  user-mysql:
    image: mysql:8
    container_name: user-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "1234"
      MYSQL_DATABASE: user_db
    ports:
      - "3311:3306"
    volumes:
      - user_mysql_data:/var/lib/mysql
    networks:
      - msanet

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - msanet

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - msanet

networks:
  msanet:
    external: true
    driver: bridge

volumes:
  help_mysql_data:
  notification_mysql_data:
  review_mysql_data:
  point_mysql_data:
  user_mysql_data:
  grafana-storage:
