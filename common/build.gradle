plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'maven-publish'
}

group = 'com.timebank'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier.set('')  // classifier 제거
}

repositories {
    mavenCentral()
}
ext {
    set('springCloudVersion', "2024.0.0")
}


dependencies {
    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // common 모듈을 사용하는 소비자에게도 spring-tx 등이 전이됨
    api 'org.springframework.boot:spring-boot-starter-web'
    api 'org.springframework.boot:spring-boot-starter-validation'

    // ✅ JPA
    api 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework:spring-tx'


    // ✅ OpenFeign (Spring Cloud)
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // ✅ Spring Boot Redis Starter (Spring Data Redis + 기본 클라이언트 Lettuce 포함)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // ✅ Config Client
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'

    // ✅ Kafka
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'mysql:mysql-connector-java:8.0.33'

    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

tasks.named('test') {
    enabled = false
}
