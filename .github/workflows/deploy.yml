name: Deploy to EC2 (Blue-Green)

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SLACK_DEV_WEBHOOK_URL: ${{ secrets.SLACK_DEV_WEBHOOK_URL }}
      SLACK_PROD_WEBHOOK_URL: ${{ secrets.SLACK_PROD_WEBHOOK_URL }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Define Tag
      id: define_tag
      run: echo "TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Detect Changed Services
      id: detect_services
      run: |
        SERVICES="gateway-service help-service notification-service review-service point-service user-service config-server eureka-server"
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        
        if echo "$CHANGED_FILES" | grep -E '(^build.gradle|^settings.gradle|^gradlew|^gradlew.bat|^build.gradle.kts|^common/)' > /dev/null; then
          echo "Gradle or common module changed. Building all services."
          echo "CHANGED_SERVICES=$SERVICES" >> $GITHUB_ENV
        else
          CHANGED_SERVICES=$(echo "$CHANGED_FILES" | grep -E '^(gateway-service|help-service|notification-service|review-service|point-service|user-service|config-server|eureka-server)/' | awk -F/ '{print $1}' | sort -u | xargs)
          echo "Detected changed services: $CHANGED_SERVICES"
          echo "CHANGED_SERVICES=$CHANGED_SERVICES" >> $GITHUB_ENV
        fi

    - name: Cancel Workflow if No Changes
      if: env.CHANGED_SERVICES == ''
      run: |
        echo "No services changed. Exiting workflow early."
        exit 0

    - name: Build and Push Only Changed Services
      run: |
        for service in ${{ env.CHANGED_SERVICES }}; do
          docker build -t namgyu967/$service:${{ env.TAG }} -f $service/Dockerfile .
          docker push namgyu967/$service:${{ env.TAG }}
        done

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/timebank
          echo "TAG=${{ env.TAG }}" > .env-tag
          source .env-tag

          for service in ${{ env.CHANGED_SERVICES }}; do
            docker-compose pull $service
            docker-compose up -d $service
          done

          docker image prune -af

    - name: Health Check Changed Services
      id: health_check
      run: |
        echo "Checking health of services..."
        GATEWAY_URL="http://${{ secrets.EC2_PUBLIC_IP }}:8080"

        SUCCESS_SERVICES=""
        FAILED_SERVICES=""

        for service in ${{ env.CHANGED_SERVICES }}; do
          echo "Checking $service..."
          for i in {1..10}; do
            sleep 5
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$GATEWAY_URL/$service/actuator/health")
            if [ "$STATUS" == "200" ]; then
              echo "$service is healthy!"
              SUCCESS_SERVICES="$SUCCESS_SERVICES $service"
              break
            fi
            if [ "$i" -eq 10 ]; then
              echo "$service health check failed."
              FAILED_SERVICES="$FAILED_SERVICES $service"
            fi
          done
        done

        echo "SUCCESS_SERVICES=$SUCCESS_SERVICES" >> $GITHUB_ENV
        echo "FAILED_SERVICES=$FAILED_SERVICES" >> $GITHUB_ENV

    - name: Slack Notification (Success)
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": ":rocket: *TimeBank 배포 성공!*\n\n> 성공 서비스: `${{ env.SUCCESS_SERVICES }}`\n> 실패 서비스: `${{ env.FAILED_SERVICES }}`\n> 태그: `${{ env.TAG }}`\n\n▶️ [Eureka Server 바로가기](http://${{ secrets.EC2_HOST }}:8761)"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ github.ref == 'refs/heads/main' && env.SLACK_PROD_WEBHOOK_URL || env.SLACK_DEV_WEBHOOK_URL }}

    - name: Slack Notification (Failure)
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": ":x: *TimeBank 배포 실패!*"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ github.ref == 'refs/heads/main' && env.SLACK_PROD_WEBHOOK_URL || env.SLACK_DEV_WEBHOOK_URL }}
