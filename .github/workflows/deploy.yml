name: Deploy to EC2 (Blue-Green)

on:
  push:
    branches:
      - develop
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SLACK_DEV_WEBHOOK_URL: ${{ secrets.SLACK_DEV_WEBHOOK_URL }}
      SLACK_PROD_WEBHOOK_URL: ${{ secrets.SLACK_PROD_WEBHOOK_URL }}
      SERVICES: "gateway-service help-service notification-service review-service point-service user-service config-server eureka-server"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Define TAG
      id: define_tag
      run: echo "TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Detect Changed Services
      id: detect_services
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        if echo "$CHANGED_FILES" | grep -Eq '(^build.gradle|^settings.gradle|^gradlew|^build.gradle.kts|^common/)'; then
          echo "CHANGED=ALL" >> $GITHUB_ENV
        else
          CHANGED=$(echo "$CHANGED_FILES" \
            | grep -E '^(gateway-service|help-service|notification-service|review-service|point-service|user-service|config-server|eureka-server)/' \
            | awk -F/ '{print $1}' | sort -u | xargs)
          echo "CHANGED=$CHANGED" >> $GITHUB_ENV
        fi

    - name: Check EC2 for Existing Containers
      id: remote_check
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        capture_stdout: true
        script: |
          docker ps \
            --filter name=gateway-blue --filter name=gateway-green \
            --filter name=help-service --filter name=notification-service \
            --filter name=review-service --filter name=point-service \
            --filter name=user-service --filter name=config-server \
            --filter name=eureka-server \
            --format '{{.Names}}' \
            | wc -l

    - name: Export EXISTING_COUNT
      run: |
        # ssh-action 출력에서 첫 줄(컨테이너 숫자)만 추출하고, 숫자가 아닌 건 삭제
        COUNT_RAW="${{ steps.remote_check.outputs.stdout }}"
        COUNT_NUM=$(echo "$COUNT_RAW" | head -n1 | tr -cd '0-9')
        echo "EXISTING_COUNT=$COUNT_NUM" >> $GITHUB_ENV

    - name: Cancel if No Changes & Not Initial Deploy
      run: |
        echo "Existing containers on server: $EXISTING_COUNT"
        if [ -z "$CHANGED" ] && [ "$EXISTING_COUNT" -gt 2 ]; then
          echo "No changes and more than 2 existing containers → Skipping deploy."
          exit 0
        fi



    - name: Build & Push Changed Services
      run: |
        if [ "${CHANGED}" = "ALL" ]; then
          TARGETS=($SERVICES)
        else
          TARGETS=($CHANGED)
        fi
        for service in "${TARGETS[@]}"; do
          docker build -t namgyu967/$service:${TAG} -f $service/Dockerfile .
          docker push namgyu967/$service:${TAG}
        done

    - name: Deploy via SSH (Blue-Green + Others)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd ~/timebank
          # Blue-Green toggle
          if docker ps --filter name=gateway-blue --filter status=running | grep -q gateway-blue; then
            NEW=green; OLD=blue
          else
            NEW=blue; OLD=green
          fi
          docker pull namgyu967/gateway-service:${TAG}-$NEW
          docker stop gateway-$OLD || true
          docker rm gateway-$OLD || true
          docker run -d --name gateway-$NEW --network msanet -e SERVER_PORT=8080 namgyu967/gateway-service:${TAG}-$NEW
          sed -i "s/server gateway-$OLD:8080;/server gateway-$NEW:8080;/" nginx-conf/gw.conf
          docker exec nginx nginx -s reload
          # 기타 서비스
          if [ "${CHANGED}" = "ALL" ]; then
            TARGETS=($SERVICES)
          else
            TARGETS=($CHANGED)
          fi
          for service in "${TARGETS[@]}"; do
            if [ "$service" != "gateway-service" ]; then
              docker-compose pull $service
              docker-compose up -d $service
            fi
          done
          docker image prune -af

    - name: Health Check & Summarize
      id: health
      run: |
        SUCCESS=""; FAILED=""
        BASE="http://${{ secrets.EC2_PUBLIC_IP }}:8080"
        for svc in ${{ env.CHANGED }}; do
          ENDPOINT="$BASE"
          [ "$svc" != "gateway-service" ] && ENDPOINT="$BASE/$svc"
          for i in {1..10}; do sleep 5
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$ENDPOINT/actuator/health")
            if [ "$CODE" = "200" ]; then SUCCESS="$SUCCESS $svc"; break; fi
            [ "$i" -eq 10 ] && FAILED="$FAILED $svc"
          done
        done
        echo "SUCCESS=${SUCCESS:-none}" >> $GITHUB_ENV
        echo "FAILED=${FAILED:-none}" >> $GITHUB_ENV

    - name: Slack Notification (Success)
      if: success()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "${{ github.ref == 'refs/heads/main' && ':white_check_mark: *[PROD]* 배포 성공!*' || ':white_check_mark: *[DEV]* 배포 성공!*' }}\n> 변경된 서비스: ${{ env.CHANGED || 'none' }}\n> 정상: ${{ env.SUCCESS }}\n> 실패: ${{ env.FAILED }}\n> 태그: ${{ env.TAG }}\n> Gateway: http://${{ secrets.EC2_PUBLIC_IP }}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ github.ref == 'refs/heads/main' && secrets.SLACK_PROD_WEBHOOK_URL || secrets.SLACK_DEV_WEBHOOK_URL }}

    - name: Slack Notification (Failure)
      if: failure()
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "${{ github.ref == 'refs/heads/main' && ':x: *[PROD]* 배포 실패!*' || ':x: *[DEV]* 배포 실패!*' }}\n> 에러 로그를 확인해주세요."
          }
      env:
        SLACK_WEBHOOK_URL: ${{ github.ref == 'refs/heads/main' && secrets.SLACK_PROD_WEBHOOK_URL || secrets.SLACK_DEV_WEBHOOK_URL }}
